import * as i0 from '@angular/core';
import { Pipe } from '@angular/core';
import * as i1 from '@angular/platform-browser';

class SafePipe {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    transform(value, type) {
        switch (type) {
            case 'html':
                return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'script':
                return this.sanitizer.bypassSecurityTrustScript(value);
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl':
                return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default:
                throw new Error(`SafePipe unable to bypass security for invalid type: ${type}`);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: SafePipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.1.3", ngImport: i0, type: SafePipe, isStandalone: true, name: "safe" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: SafePipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'safe',
                }]
        }], ctorParameters: () => [{ type: i1.DomSanitizer }] });

/*
 * Public API Surface of safe-pipe
 */

/**
 * Generated bundle index. Do not edit.
 */

export { SafePipe };
//# sourceMappingURL=safe-pipe.mjs.map
