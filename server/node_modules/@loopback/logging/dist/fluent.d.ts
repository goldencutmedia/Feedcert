import { Getter, Provider } from '@loopback/core';
import fluent, { FluentSender, Options } from 'fluent-logger';
import TransportStream from 'winston-transport';
export { FluentSender } from 'fluent-logger';
/**
 * Provider for FluentSender
 */
export declare class FluentSenderProvider implements Provider<FluentSender<any>> {
    private getFluentConfig;
    constructor(getFluentConfig: Getter<Options | undefined>);
    private binding;
    value(): Promise<fluent.FluentSender<unknown>>;
}
/**
 * Provider to create FluentTransport for Winston
 */
export declare class FluentTransportProvider implements Provider<TransportStream> {
    private getFluentConfig;
    constructor(getFluentConfig: Getter<Options | undefined>);
    private binding;
    value(): Promise<any>;
}
